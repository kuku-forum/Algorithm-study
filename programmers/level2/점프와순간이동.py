'''
정확성  테스트
테스트 1 〉	통과 (0.00ms, 10.2MB)
테스트 2 〉	통과 (0.00ms, 10.1MB)
테스트 3 〉	통과 (0.00ms, 10.1MB)
테스트 4 〉	통과 (0.00ms, 10.2MB)
테스트 5 〉	통과 (0.00ms, 10.1MB)
테스트 6 〉	통과 (0.00ms, 10.2MB)
테스트 7 〉	통과 (0.01ms, 10MB)
테스트 8 〉	통과 (0.01ms, 10MB)
테스트 9 〉	통과 (0.01ms, 10.1MB)
테스트 10 〉	통과 (0.01ms, 10.2MB)
테스트 11 〉	통과 (0.01ms, 10.1MB)
테스트 12 〉	통과 (0.01ms, 10.1MB)
테스트 13 〉	통과 (0.00ms, 10.2MB)
테스트 14 〉	통과 (0.01ms, 10.2MB)
테스트 15 〉	통과 (0.01ms, 10.2MB)
테스트 16 〉	통과 (0.00ms, 10MB)
테스트 17 〉	통과 (0.00ms, 10.1MB)
테스트 18 〉	통과 (0.00ms, 10.2MB)
효율성  테스트
테스트 1 〉	통과 (0.02ms, 9.94MB)
테스트 2 〉	통과 (0.02ms, 10.1MB)
테스트 3 〉	통과 (0.01ms, 9.94MB)
테스트 4 〉	통과 (0.02ms, 10.2MB)
테스트 5 〉	통과 (0.02ms, 10.1MB)
테스트 6 〉	통과 (0.01ms, 10.1MB)
테스트 7 〉	통과 (0.01ms, 10.1MB)
테스트 8 〉	통과 (0.01ms, 10.2MB)
테스트 9 〉	통과 (0.01ms, 9.99MB)
테스트 10 〉	통과 (0.01ms, 9.94MB)
'''
def solution(n):
    
    def dsf(dst):
        if dst == 1:
            return 1
        
        if dst%2 == 0:
            return dsf(dst//2)
        else:
            return dsf(dst - 1) + 1
        
    return dsf(n)


# def solution(n):
#     dp = [0] * (n + 1)
#     dp[1] = 1
    
#     for dst in range(2, n + 1):
        
#         if dst%2 == 0:
#             dp[dst] = dp[dst//2]
#         else:
#             dp[dst] = dp[dst - 1] + 1
#     print(dp)
#     return dp[n]